/*
En este desaf√≠o, tendr√°s que implementar un sistema de pagos utilizando polimorfismo en JavaScript.

Se debe crear una clase base llamada Pay que contenga un √∫nico m√©todo llamado makePay. Este m√©todo recibir√° la cantidad a pagar y devolver√° un objeto con dos propiedades

realized: true
quantity: $cantidadAPagar
Adem√°s, se deben crear tambi√©n las clases PayPal, Card y Cash, donde cada una debe heredar de la clase Pay.

La clase PayPal debe recibir un email en el constructor y el m√©todo makePay debe agregar las propiedades:

platform: "PayPal"
email: $EmailRecibido.
La clase Card recibir√° un n√∫mero de tarjeta de 16 d√≠gitos. Al momento de acceder al m√©todo makePay, se validar√° si la tarjeta en cuesti√≥n tiene esa longitud. En caso de no tener los 16 d√≠gitos, se debe retornar un error. En caso contrario, al m√©todo que proviene de Pay, se le agregar√° la propiedad de lastCardNumber: donde se devolver√°n los √∫ltimos 4 d√≠gitos de la tarjeta.

La clase Cash simplemente nos devolver√° lo mismo que la clase base.

Por √∫ltimo se debe implementar la l√≥gica de la funci√≥n processPay la cual recibir√° un m√©todo de pago y la cantidad, para poder devolver el objeto llamando al m√©todo makePay de cada entidad recibida.

Cada clase tiene su propio archivo dentro del sistema de archvios del playground

Ejemplo 1:


Input:
const card = new Card("4913478952471122")

processPay(card, 100)

Output:

{
  realized: true,
  quantity: 100,
  lastCardNumbers: "1122",
}

Ejemplo 2:


Input:
const paypal = new PayPal("test@mail.com")

processPay(paypal, 240)

Output:

{
  realized: true,
  quantity: 240,
  platform: "PayPal",
  email: "test@mail.com",
}

Ejemplo 3:


Input:
const cash = new Cash()

processPay(cash, 400)

Output:

{
  realized: true,
  quantity: 400,
}
*/

//Mi soluci√≥n

//Archivo Pay.class.js
export class Pay {
  // Tu c√≥digo aqu√≠ üëà
  makePay(monto) {
    return {
      realized: true,
      quantity: monto
    }
  }
}


//Archivo PayPal.class.js
import { Pay } from "./Pay.class.js";

export class PayPal extends Pay {
  // Tu c√≥digo aqu√≠ üëà
  constructor(email){
    super();
    this.email = email;
  }
  
  makePay(monto) {
    return {
      ...super.makePay(monto),
      platform: "PayPal",
      email: this.email
    }
  }
}

//Archivo Card.class.js
import { Pay } from "./Pay.class.js";

export class Card extends Pay {
  // Tu c√≥digo aqu√≠ üëà
  constructor(cardNumber) {
    super();
    this.cardNumber = cardNumber;
  }

  makePay(monto) {
    if (this.cardNumber.length !== 16) throw new Error("El numero de tarjeta no es valido");
    else {
      return {
        ...super.makePay(monto),
        lastCardNumbers: this.cardNumber.substring(12)
      }
    }
  }
}

//Archivo Cash.class.js
import { Pay } from "./Pay.class.js";

export class Cash extends Pay {
  // Tu c√≥digo aqu√≠ üëà
  //Como Cash devuelve lo mismo que Pay no se tuvo que hacer nada adicional
}

//Archivo exercise.js
export function processPay(method, quantity) {
  // Tu c√≥digo aqu√≠ üëà
  return method.makePay(quantity);
}

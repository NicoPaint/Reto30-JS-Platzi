/*
En este reto, deber√°s utilizar el patr√≥n decorator para personalizar productos en una tienda.

La clase abstracta de la cual interactuar√°n los decoradores se encuentra en el archivo product.js el cual puedes ver dentro del sistema de archivos del playground.

La tienda ofrece productos con un precio base y una descripci√≥n, pero a veces los clientes quieren agregar extras, como una garant√≠a o un seguro de env√≠o. Tu objetivo es implementar el patr√≥n decorator para permitir a los clientes personalizar sus productos con estos extras.

Debes implementar la l√≥gica de las siguientes clases (cada una con su respectivo archivo dentro del coding playground):

BasicProduct(price, product): heredar√° de la clase Product y retornar√° el nombre del producto al implementar el m√©todo getDescription.
WarrantyDecorator(basicProduct): heredar√° de Product, pero deber√° sumar 20$ al precio final y agregarle el string "con garant√≠a" a la descripci√≥n del producto.
ShippingInsuranceDecorator(basicProduct): heredar√° de Product e igual que WarrantyDecorator, sumar√° 20 al precio final y agregar√° el string "con seguro de env√≠o" a la descripci√≥n del producto.
Ejemplo 1:

Input:
const basicProduct = new BasicProduct(100, "Camisa de algod√≥n");
const withWarranty = new WarrantyDecorator(basicProduct);
const withShippingInsurance = new ShippingInsuranceDecorator(withWarranty);
console.log(withShippingInsurance.getPrice());
console.log(withShippingInsurance.getDescription());
Output:
140
"Camisa de algod√≥n con garant√≠a con seguro de env√≠o"

Ejemplo 2:

Input:
const basicProduct = new BasicProduct(5000, "Refrigerador");
const withWarranty = new WarrantyDecorator(basicProduct);
console.log(withWarranty.getPrice());
console.log(withWarranty.getDescription());
Output:
5020
"Refrigerador con garant√≠a"

Ejemplo 3:

Input:
const basicProduct = new BasicProduct(5000, "Refrigerador");
const withShippingInsurance = new ShippingInsuranceDecorator(basicProduct);
console.log(withShippingInsurance.getPrice());
console.log(withShippingInsurance.getDescription());
Output:
5020
"Refrigerador con seguro de env√≠o"
*/

//Mi soluci√≥n
//Archivo product.js
export class Product {
  // Este c√≥digo no debe ser editado ‚ùå
  constructor(price) {
    this.price = price;
  }

  getPrice() {
    return this.price;
  }

  getDescription() {
    throw new Error("Este m√©todo debe ser implementado en las subclases");
  }
}

//Archivo WarrantyDecorator.js
import { Product } from "./product";

export class WarrantyDecorator extends Product {
  constructor(product) {
    // Tu c√≥digo aqu√≠ üëà
    super();
    this.product = product;
  }

  getPrice() {
    // Tu c√≥digo aqu√≠ üëà
    return this.product.getPrice() + 20;
  }

  getDescription() {
    // Tu c√≥digo aqu√≠ üëà
    return `${this.product.getDescription()} con garant√≠a`;
  }
}

//Archivo ShippingInsurance.js
import { Product } from "./product";

export class ShippingInsuranceDecorator extends Product {
  constructor(product) {
    // Tu c√≥digo aqu√≠ üëà
    super();
    this.product = product;
  }

  getPrice() {
    // Tu c√≥digo aqu√≠ üëà
    return this.product.getPrice() + 20;
  }

  getDescription() {
    // Tu c√≥digo aqu√≠ üëà
    return `${this.product.getDescription()} con seguro de env√≠o`;
  }
}

//Archivo exercise.js
import { Product } from "./product";

export class BasicProduct extends Product {
  constructor(price, description) {
    // Tu c√≥digo aqu√≠ üëà
    super(price);
    this.description = description;
  }

  getDescription() {
    // Tu c√≥digo aqu√≠ üëà
    return this.description;
  }
}

//La soluci√≥n de Platzi fue exactamente la misma

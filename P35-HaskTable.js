/*
En este desaf√≠o, debes construir una lista de contactos mediante una hashTable.

Tu objetivo ser√° el de implementar la l√≥gica de la clase ContactList para agregar contactos y realizar las operaciones correspondientes.

La hashTable (ContactList) deber√° tener los siguientes m√©todos:

insert(name, phone): este m√©todo recibir√° el nombre y el n√∫mero de tel√©fono de un contacto, y agregar√° este √∫ltimo a la hashTable.

get(name): este m√©todo recibir√° el nombre de un contacto y devolver√° su n√∫mero de tel√©fono. Si el contacto no existe, retornar√° null.

retrieveAll(): este m√©todo devolver√° un array con todos los buckets utilizados en la hashTable.

delete(name): este m√©todo recibir√° el nombre de un contacto y eliminar√° dicho contacto de la hashTable, en caso de no encontrar el name debe retornar null.

El c√≥digo original ya tiene una implementaci√≥n del m√©todo hash por lo que no te tienes que preocuparte por ello.

Ejemplo 1:

Input:

const contactList = new ContactList(10)
contactList.insert("Mr michi", "123-456-7890")

contactList.retrieveAll()

Output: [["Mr michi", "123-456-7890"]]

Ejemplo 2:

Input:

const contactList = new ContactList(10)
contactList.insert("Mr michi", "123-456-7890")

contactList.get("Mr Michi")

Output: "123-456-7890"

Ejemplo 3:


Input:

const contactList = new ContactList(10)
contactList.insert("Mr michi", "123-456-7890")
contactList.delete("Mr michi")

contactList.get("Mr Michi")

Output: null
*/

//Mi soluci√≥n
export class ContactList {
  constructor(size) {
    // Tu c√≥digo aqu√≠ üëà
    this.buckets = new Array(size);
    this.numBuckets = this.buckets.length;
  }

  hash(name) {
    let total = 0;
    for (let i = 0; i < name.length; i++) {
      total += name.charCodeAt(i);
    }
    return total % this.numBuckets;
  }

  insert(name, phone) {
    // Tu c√≥digo aqu√≠ üëà
    const index = this.hash(name);

    if (!this.buckets[index]) this.buckets[index] = [];

    this.buckets[index].push([name, phone]);
  }

  get(name) {
    // Tu c√≥digo aqu√≠ üëà
    const index = this.hash(name);

    if (!this.buckets[index]) return null;

    for (let i = 0; i < this.buckets[index].length; i++){
      if (this.buckets[index][i][0] === name) return this.buckets[index][i][1];
    }

    return null;
  }

  retrieveAll() {
    // Tu c√≥digo aqu√≠ üëà
    const allBuckets = [];

    for (let i = 0; i < this.numBuckets; i++){
      if (this.buckets[i]) {
        for (let j = 0; j < this.buckets[i].length; j++){
          allBuckets.push(this.buckets[i][j]);
        }
      }
    }

    return allBuckets;
  }

  delete(name) {
    // Tu c√≥digo aqu√≠ üëà
    const index = this.hash(name);

    if (!this.buckets[index]) return null;

    const internalIndex = this.buckets[index].findIndex(bucket => bucket[0] === name);

    if (internalIndex < 0) return null;

    this.buckets[index].splice(internalIndex, 1);
  }
}

//La soluci√≥n de Platzi
export class ContactList {
  constructor(size) {
    this.buckets = new Array(size);
    this.numBuckets = this.buckets.length;
  }

  hash(name) {
    let total = 0;
    for (let i = 0; i < name.length; i++) {
      total += name.charCodeAt(i);
    }
    return total % this.numBuckets;
  }

  insert(name, phone) {
    const index = this.hash(name);
    if (!this.buckets[index]) {
      this.buckets[index] = [];
    }

    this.buckets[index].push([name, phone]);
  }

  get(name) {
    const index = this.hash(name);
    if (!this.buckets[index]) {
      return null;
    }
    for (let i = 0; i < this.buckets[index].length; i++) {
      if (this.buckets[index][i][0] === name) {
        return this.buckets[index][i][1];
      }
    }
    return null;
  }

  retrieveAll() {
    const allValues = [];
    for (let i = 0; i < this.numBuckets; i++) {
      if (this.buckets[i]) {
        for (let j = 0; j < this.buckets[i].length; j++) {
          allValues.push(this.buckets[i][j]);
        }
      }
    }
    return allValues;
  }

  delete(name) {
    const index = this.hash(name);

    if (!this.buckets[index]) {
      return null;
    }

    for (let i = 0; i < this.buckets[index].length; i++) {
      if (this.buckets[index][i][0] === name) {
        this.buckets[index].splice(i, 1);
        return;
      }
    }
  }
}
